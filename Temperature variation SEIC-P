
################################################################################
#############################                  #################################
######################## Temperature variation SEIC-P ##########################
#############################                  #################################
################################################################################

################################################################################
################################################################################
#############################  Required Library  ###############################
################################################################################
################################################################################

library(deSolve)
library(ggplot2)
library(truncnorm)
library(gridExtra)
library(grid)
library(lattice)
library(stats)
library(scales)
library(ggpubr)

################################################################################
############################## Initial values ##################################
################################################################################

N = 10000
E = 0
I = 1
C = 0
P = 0
D = 0
S=N-C-I-E-D

################################################################################
############################ Time step setting #################################
################################################################################

endT = 12
deltaT = 1/30
time = seq(0,endT,by = deltaT)
temp = 2.95*sin(time*0.55)+11.75

################################################################################
########################### Event matrix setting ###############################
################################################################################

emat2 = matrix(c(-1,0,0,0,0,1,################################################## mu*S
                 -1,1,0,0,-1,0,################################################# betaP * P * S/(S+E+I+C)
                 0,-1,0,0,0,1,################################################## mu*E
                 0,-1,1,0,0,0,################################################## sigma*E
                 0,0,-1,0,0,1,################################################## mu*I
                 0,0,-1,0,0,1,################################################## alpha * I
                 0,0,-1,1,0,0,################################################## gamma*I
                 0,0,0,-1,0,1,################################################## mu*C
                 0,0,0,0,1,0,################################################### delta*I + phi*C
                 0,0,0,0,-1,0,################################################## tau*P
                 0,0,0,0,-1,0),################################################# rho*P
               ncol = 6, byrow = TRUE)########################################## every possibility the model can take

################################################################################
######################## Parameters variation ##################################
################################################################################

beta <-matrix(0.92,nrow = length(time))
sigma <- matrix(0.24,ncol= 1, nrow = length(time))
alpha <- matrix(-0.008839*temp+0.132910,nrow = length(time))
gamma <- matrix(0.01075*temp-0.08605,nrow = length(time))
tau <- matrix(0.01895*temp-0.04254,nrow = length(time))
delta <- matrix((-0.6924)*temp+(15.1082),nrow = length(time))
recoshed <- matrix(1.8, nrow = length(time))
phi <- data.frame(recoshed, temp)
phi$recoshed <- ifelse(phi$temp > 9, 0, phi$recoshed)
phi <- phi$recoshed
mu<- matrix(0.0008, ncol= 1, nrow = length(time))
rho<- matrix(0.9, ncol = 1, nrow = length(time))
param <- data.frame(beta, 
                    sigma, 
                    alpha, 
                    gamma,
                    tau,
                    delta,
                    phi,
                    mu,
                    rho)

################################################################################
########################## Equation setting ####################################
################################################################################

rlist2 = c(quote(mu*S),
           quote(beta * P * S/(S+E+I+C)),
           quote(mu*E),
           quote(sigma*E),
           quote(mu*I),
           quote(alpha * I),
           quote(gamma*I),
           quote(mu*C),
           quote(delta*I +phi*C),
           quote(tau*P),
           quote(rho*P))

################################################################################
############################# Model function ###################################
################################################################################

SEICP = function(rateqs,eventmatrix, parameters, initialvals, deltaT, endT){
  time = seq(0,endT,by = deltaT)
  res <- data.frame(matrix(NA, ncol = length(initialvals)+ 1, nrow = length(time)))
  res[, 1] = time
  names(res) = c("time", names(inits))
  res[1, ] = c(0, inits)
  for(i in 1:(length(time)-1)){
    parameters <- c(beta = param$beta[i], sigma = param$sigma[i], gamma = param$gamma[i],
                    alpha = param$alpha[i], mu = param$mu[i], delta = param$delta[i],
                    phi = param$phi[i], tau = param$tau[i], rho = param$rho[i])
    #calculate overall rates
    rat = sapply(rateqs, eval, as.list(c(parameters, res[i,])))
    evts = rpois(1,sum(rat, na.rm = TRUE))
    if(evts > 0){
      #draw event
      whichevent = sample(1:nrow(eventmatrix), evts, prob = rat, replace = TRUE)
      mt = rbind(eventmatrix[whichevent,], t(matrix(res[i,-1])))
      mt = matrix(as.numeric(mt), ncol = ncol(mt))
      #update states
      res[i + 1, -1] = apply(mt, 2, sum)
      res[i + 1, ][res[i + 1,] < 0] = 0 
    }
    else{
      #if no events in deltaT
      res[i+1,-1] = res[i,-1]
    }
  }
  return(res)
}
################################################################################ Source: (BjÃ¸rnstad 2023)

################################################################################
#############################   var temperature  ###############################
################################################################################

inits = c(S =S, E =E, I = I, C = C , P = P, D = D)############################## Initial values
  
  paras = c(param$beta, param$sigma, param$alpha, param$gamma, param$mu, 
            param$delta, param$phi, param$tau, param$rho)####################### Parameter values
  simTT <- SEICP(rlist2, emat2, paras, inits,deltaT,endT)####################### apply the function
  simTT <- data.frame(simTT)#################################################### creation of the data frame

simTT$iteration =0############################################################## Creation of the iterations
iterations = 199################################################################ set to 199 iterations more

for(j in 1:iterations){
  inits = c(S = S, E =E, I = I, C = C, P = P, D = D)
  simTT1 <- SEICP(rlist2, emat2, paras, inits,deltaT,endT)
  simTT1<-data.frame(simTT1)
  simTT1$iteration<-j
  simTT<-rbind(simTT1, simTT)
}############################################################################### for loop for iteration
simTT$iteration = as.factor(simTT$iteration)#################################### Set values for iteration as factor

################################################################################
################################################################################
#################################### Plots #####################################
################################################################################
################################################################################

################################################################################
###################### Plot of the whole model #################################
################################################################################

TTplot <- ggplot(simTT,aes(x=time, by=iteration))+
  geom_line(aes(y=S),size = 3, colour = "blue4")+
  geom_line(aes(y=E),size = 3, colour ="darkgoldenrod1")+
  geom_line(aes(y=I),size = 3, colour = "brown1")+
  geom_line(aes(y=C),size = 3, colour = "cyan3")+
  geom_line(aes(y=D),size = 3, colour = "grey")+
  ylab(label="Number of fish")+
  scale_y_continuous(labels = percent_format(scale = 0.01),
                     limits = c(0,N))+
  theme_classic()+
  xlab(label="Time (month)")+
  theme(axis.text=element_text(size=100),
        axis.title=element_text(size=100,face="bold"))

################################################################################
####################### Susceptible and carrier plot ###########################
################################################################################

SusceptibleTT <- ggplot(simTT,aes(x=time, by = iteration))+
  geom_line(aes(y=S, colour = "Susceptible"),size = 3 )+
  geom_line(aes(y=C, colour = "Carrier"),size = 3 )+
  ylab(label="
  Susceptible and
       carrier fish
       ")+
  scale_y_continuous(labels = percent_format(scale = 0.01),
                     limits = c(0,N))+
  theme_classic()+
  theme(panel.border = element_rect(color = "black", fill = NA, size = 6),
        panel.background = element_rect(fill = "white"))+
  xlab(label="Time (month)")+
  theme(axis.text=element_text(size=100),
        axis.title=element_text(size=100,face="bold"))+
  theme(legend.justification=c(1,0), legend.position=c(0.6,0.5))+
  theme(legend.title=element_text(size=0,face="bold"),
        legend.background = element_rect(fill='#FFFFFF',
                                         size=100,linetype="solid"),
        legend.text=element_text(size=80),
        legend.key=element_rect(colour="#FFFFFF",
                                fill='#FFFFFF',
                                size=0,
                                linetype="solid"))+
  scale_colour_manual("",
                      breaks=c("Susceptible","Carrier"),
                      values=c("blue4","cyan3" ))

################################################################################
########################## Exposed and infected plot ###########################
################################################################################

InfectedTT <- ggplot(simTT,aes(x=time, by=iteration))+
geom_line(aes(y=E, colour = "Exposed"),size = 3)+
  geom_line(aes(y=I, colour = "Infected"),size = 3)+
  ylab(label="
  Exposed and 
       infected fish
       ")+
  scale_y_continuous(labels = percent_format(scale = 0.01),
                     limits = c(0,N))+
  theme_classic()+
  theme(panel.border = element_rect(color = "black", fill = NA, size = 6),
        panel.background = element_rect(fill = "white"))+
  xlab(label="Time (month)")+
  theme(axis.text=element_text(size=100),
        axis.title=element_text(size=100,face="bold"))+
  theme(legend.justification=c(1,0), legend.position=c(0.5,0.6))+
  theme(legend.title=element_text(size=0,face="bold"),
        legend.background = element_rect(fill='#FFFFFF',
                                         size=100,linetype="solid"),
        legend.text=element_text(size=80),
        legend.key=element_rect(colour="#FFFFFF",
                                fill='#FFFFFF',
                                size=0,
                                linetype="solid"))+
  scale_colour_manual("",
                      breaks=c("Exposed","Infected"),
                      values=c("darkgoldenrod1", "brown1"))

################################################################################
############################## Particle plot ###################################
################################################################################

ParticlesTT <- ggplot(simTT,aes(x=time, by=iteration))+
  geom_line(aes(y=P/100000),size = 3, colour = "grey27")+####################### P is divided by the total volume
  ylab(label="
  Millions of Particles 
       in the water (in PFU/L)
       ")+
  xlab(label="Time (month)")+
  theme_classic()+
  theme(panel.border = element_rect(color = "black", fill = NA, size = 6),
        panel.background = element_rect(fill = "white"))+
  theme(axis.text=element_text(size=100),
        axis.title=element_text(size=100,face="bold"))

################################################################################
######################## Temperature variation plot ############################
################################################################################

temp <- data.frame(temp, time)
TT <- ggplot(temp, aes(x = time))+
  geom_line(aes(y = temp), colour = "black", size = 10)+
  ylab(label = "
  Temperature (Â°C)
  
  
       ")+
  theme_classic()+
  theme(panel.border = element_rect(color = "black", fill = NA, size = 6),
        panel.background = element_rect(fill = "white"))+
  xlab(label = "Time (month)")+
  theme(axis.text=element_text(size=100),
        axis.title=element_text(size=100,face="bold"),
        title =  element_text(size = 80))

################################################################################
########################### creation of the plots ##############################
################################################################################
  
png(filename = "TimeTempPlot.png", height = 4500, width = 6400, res = 100 )##### name and resolution of the file

grid.arrange(TT, SusceptibleTT, 
             InfectedTT,ParticlesTT, 
             ncol=2)############################################################ making a grid with the multiple plots
dev.off()####################################################################### send the plot on the chosen working directory
