################################################################################
##########################                  ####################################
###############  SEIC-P for each constant temperature  #########################
##########################                  ####################################
################################################################################
                    
                    
################################################################################
################################################################################
#############################  Required Library  ###############################
################################################################################
################################################################################

library(deSolve)
library(ggplot2)
library(truncnorm)
library(gridExtra)
library(grid)
library(lattice)
library(ggpubr)
library(scales)

################################################################################
############################## Initial values ##################################
################################################################################

N = 10000
E = 0
I = 1
C = 0
P = 0
D = 0
S=N-C-I-E-D

################################################################################
############################ Time step setting #################################
################################################################################

endT = 12
deltaT = 1/30
time = seq(0,endT,by = deltaT)

################################################################################
########################### Event matrix setting ###############################
################################################################################

emat2 = matrix(c(-1,0,0,0,0,1,################################################## mu*S
                 -1,1,0,0,-1,0,################################################# betaP * P * S/(S+E+I+C)
                 0,-1,0,0,0,1,################################################## mu*E
                 0,-1,1,0,0,0,################################################## sigma*E
                 0,0,-1,0,0,1,################################################## mu*I
                 0,0,-1,0,0,1,################################################## alpha * I
                 0,0,-1,1,0,0,################################################## gamma*I
                 0,0,0,-1,0,1,################################################## mu*C
                 0,0,0,0,1,0,################################################### delta*I + phi*C
                 0,0,0,0,-1,0,################################################## tau*P
                 0,0,0,0,-1,0),################################################# rho*P
               ncol = 6, byrow = TRUE)########################################## every possibility the model can take

################################################################################
########################## Equation setting ####################################
################################################################################

rlist2 = c(quote(mu*S),
           quote(beta * P * S/(S+E+I+C)),
           quote(mu*E),
           quote(sigma*E),
           quote(mu*I),
           quote(alpha * I),
           quote(gamma*I),
           quote(mu*C),
           quote(delta*I +phi*C),
           quote(tau*P),
           quote(rho*P))

################################################################################
############################# Model function ###################################
################################################################################

SEICP = function(rateqs,eventmatrix, parameters, initialvals, deltaT, endT){
  time = seq(0,endT,by = deltaT)
  res <- data.frame(matrix(NA, ncol = length(initialvals)+ 1, nrow = length(time)))
  res[, 1] = time
  names(res) = c("time", names(inits))
  res[1, ] = c(0, inits)
  for(i in 1:(length(time)-1)){
    #calculate overall rates
    rat = sapply(rateqs, eval, as.list(c(parameters, res[i,])))
    evts = rpois(1,sum(rat, na.rm = TRUE))
    if(evts > 0){
      #draw event
      whichevent = sample(1:nrow(eventmatrix), evts, prob = rat, replace = TRUE)
      mt = rbind(eventmatrix[whichevent,], t(matrix(res[i,-1])))
      mt = matrix(as.numeric(mt), ncol = ncol(mt))
      #update states
      res[i + 1, -1] = apply(mt, 2, sum)
      res[i + 1, ][res[i + 1,] < 0] = 0 
    }
    else{
      #if no events in deltaT
      res[i+1,-1] = res[i,-1]
    }
  }
  return(res)
}
################################################################################ Source: (Bjørnstad 2023)

################################################################################
#############################   cold temperature  ##############################
################################################################################

inits = c(S =S, E =E, I = I, C = C , P = P, D = D)############################## Initial values
paras = c(beta = 0.92, sigma = 0.24, gamma = 0.01, mu = 0.0008, 
          alpha = 0.061, delta = 9.7, phi = 1.8, tau = 0.111, rho = 0.9)######## Parameter values
simCold = SEICP(rlist2, emat2, paras, inits,deltaT,endT)######################## apply the function
simCold <- data.frame(simCold)################################################## creation of the data frame

simCold$iteration = 0 ########################################################## Creation of the iterations
iterations = 199 ############################################################### set to 199 iterations more

for(j in 1:iterations){
  inits = c(S = S, E =E, I = I, C = C, P = P, D = D)
  simCold1 <- SEICP(rlist2, emat2, paras, inits,deltaT,endT)
  simCold1<-data.frame(simCold1)
  simCold1$iteration<-j
  simCold<-rbind(simCold1, simCold)
} ############################################################################## for loop for iteration
simCold$iteration = as.factor(simCold$iteration)################################ Set values for iteration as factor

################################################################################
########################### Ambient temperature ################################
################################################################################

inits = c(S =S, E =E, I =I, C =C , P = P, D = D)################################ Initial values
paras = c(beta = 0.92, sigma = 0.24, gamma = 0.032, mu = 0.0008, 
           alpha = 0.024, delta = 6.2, phi = 0,tau = 0.16, rho = 0.9)########### Parameter values
simAmbient = SEICP(rlist2, emat2, paras, inits,deltaT,endT)##################### apply the function
simAmbient <- data.frame(simAmbient)############################################ creation of the data frame

simAmbient$iteration = 0 ####################################################### Creation of the iterations
iterations = 199 ############################################################### set to 199 iterations more

for(j in 1:iterations){
  inits = c(S = S, E =E, I = I, C = C, P = P, D = D)
  simAmb1 <- SEICP(rlist2, emat2, paras, inits,deltaT,endT)
  simAmb1<-data.frame(simAmb1)
  simAmb1$iteration<-j
  simAmbient<-rbind(simAmb1, simAmbient)
} ############################################################################## for loop for iteration
simAmbient$iteration = as.factor(simAmbient$iteration)########################## Set values for iteration as factor

################################################################################
############################  warm temperature #################################
################################################################################

inits = c(S =S, E =E, I =I, C =C , P = P, D = D) ############################### Initial values
paras = c(beta = 0.92, sigma = 0.24, gamma = 0.073, mu = 0.0008, 
           alpha = 0.007, delta = 5.4, phi = 0, tau = 0.24, rho = 0.9) ######### Parameter values
simWarm = SEICP(rlist2, emat2, paras, inits,deltaT,endT)######################## apply the function
simWarm <- data.frame(simWarm)################################################## creation of the data frame

simWarm$iteration = 0 ########################################################## Creation of the iterations
iterations = 199 ############################################################### set to 199 iterations more

for(j in 1:iterations){
  inits = c(S = S, E =E, I = I, C = C, P = P, D = D)
  simWarm1 <- SEICP(rlist2, emat2, paras, inits,deltaT,endT)
  simWarm1<-data.frame(simWarm1)
  simWarm1$iteration<-j
  simWarm<-rbind(simWarm1, simWarm)
} ############################################################################## for loop for iteration
simWarm$iteration = as.factor(simWarm$iteration)################################ Set values for iteration as factor

################################################################################
################################################################################
#################################### Plots #####################################
################################################################################
################################################################################

all <- data.frame(simWarm,simAmbient, simCold)################################## set data frame with all models results

################################################################################
############################ Susceptible plot ##################################
################################################################################

allplotS <- ggplot(all,aes(x=time,by = c(iteration)))+
  geom_line(aes(y=S, colour = "Constant ~14.7°C"),size = 2)+
  geom_line(aes(y=S.1, colour = "Constant ~11.2°C"),size = 2)+
  geom_line(aes(y=S.2, colour = "Constant ~8.8°C"),size = 2)+
  ylab(label="
  Susceptible 
        fish
       ")+
  scale_y_continuous(labels = percent_format(scale = 0.01),
                     limits = c(0,N))+
  scale_x_continuous(limits = c(0,5))+
  xlab(label="Time (month)")+
  theme_classic()+
  theme(panel.border = element_rect(color = "black", fill = NA, size = 6),
        panel.background = element_rect(fill = "white"))+
  theme(axis.text=element_text(size=100),
        axis.title=element_text(size=100,face="bold"))+
  theme(legend.justification=c(1,0), legend.position=c(0.9,0.5))+
  theme(legend.title=element_text(size=30,face="bold"),
        legend.background = element_rect(fill='#FFFFFF',
                                         size=0.5,linetype="solid"),
        legend.text=element_text(size=80),
        legend.key=element_rect(colour="#FFFFFF",
                                fill='#FFFFFF',
                                linewidth = 1,
                                linetype="solid"))+
  scale_colour_manual("",
                      breaks=c("Constant ~14.7°C",
                               "Constant ~11.2°C","Constant ~8.8°C"),
                      values=c("red","orange", "blue"))

################################################################################
############################## Infected plot ###################################
################################################################################

allplotI <- ggplot(all,aes(x=time,by = c(iteration)))+
  geom_line(aes(y=I),size = 2, colour = "red")+
  geom_line(aes(y=I.1),size = 2, colour = "orange")+
  geom_line(aes(y=I.2),size = 2, colour = "blue")+
  ylab(label="
       Infected 
       fish
       ")+
  scale_y_continuous(labels = percent_format(scale = 0.01),
                     limits = c(0,N))+
  scale_x_continuous(limits = c(0,5))+
  xlab(label="Time (month)")+
  theme_classic() +
  theme(panel.border = element_rect(color = "black", fill = NA, size = 6),
        panel.background = element_rect(fill = "white"))+
  theme(axis.text=element_text(size=100),
        axis.title=element_text(size=100,face="bold"))

################################################################################
############################### Carrier plot ###################################
################################################################################

allplotC <- ggplot(all,aes(x=time,by = iteration))+
  geom_line(aes(y=C),size = 2, colour = "red")+
  geom_line(aes(y=C.1),size = 2, colour = "orange")+
  geom_line(aes(y=C.2),size = 2, colour = "blue")+
  theme_classic() +
  theme(panel.border = element_rect(color = "black", fill = NA, size = 6),
        panel.background = element_rect(fill = "white"))+
  ylab(label="
       Carrier 
       fish
       ")+
  scale_y_continuous(labels = percent_format(scale = 0.01),
                     limits = c(0,N))+
  scale_x_continuous(limits = c(0,5))+
  xlab(label="Time (month)")+
  theme(axis.text=element_text(size=100),
        axis.title=element_text(size=100,face="bold"))

################################################################################
############################### Mortality plot #################################
################################################################################

allplotD <- ggplot(all,aes(x=time,by = iteration))+
  geom_line(aes(y=D),size = 2, colour = "red")+
  geom_line(aes(y=D.1),size = 2, colour = "orange")+
  geom_line(aes(y=D.2),size = 2, colour = "blue")+
  ylab(label="
       Dead 
       fish
       ")+
  scale_y_continuous(labels = percent_format(scale = 0.01),
                     limits = c(0,N))+
  scale_x_continuous(limits = c(0,5))+
  theme_classic() +
  theme(panel.border = element_rect(color = "black", fill = NA, size = 6),
        panel.background = element_rect(fill = "white"))+
  xlab(label="Time (month)")+
  theme(axis.text=element_text(size=100),
        axis.title=element_text(size=100,face="bold"))

################################################################################
############################## Particle plot ###################################
################################################################################

allplotP <- ggplot(all,aes(x=time,by = iteration))+
  geom_line(aes(y=P/100000),size = 2, colour = "red")+
  geom_line(aes(y=P.1/100000),size = 2, colour = "orange")+
  geom_line(aes(y=P.2/100000),size = 2, colour = "blue")+####################### P is divided by the total volume
  ylab(label="
  Millions of particles 
  shed in the water 
       (in PFU/L)
       ")+
  scale_x_continuous(limits = c(0,5))+
  theme_classic() +
  theme(panel.border = element_rect(color = "black", fill = NA, size = 6),
        panel.background = element_rect(fill = "white"))+
  xlab(label="Time (month)")+
  theme(axis.text=element_text(size=100),
        axis.title=element_text(size=100,face="bold"))

################################################################################
########################### creation of the plots ##############################
################################################################################

png(filename = "AllPlot.png", height = 4500, width = 6400, res = 100 )########## name and resolution of the file
grid.arrange(allplotS,allplotI, 
             allplotC, allplotD,
             allplotP,
             ncol=2)############################################################ making a grid with the multiple plots
dev.off()####################################################################### send the plot on the chosen working directory
